name: Reusable Security Scan with Trivy

on:
    workflow_call:
        inputs:
            service_name:
                required: true
                type: string
                description: "Name of the service to scan"
            dockerfile_path:
                required: true
                type: string
                description: "Path to the Dockerfile"
            context_path:
                required: true
                type: string
                description: "Build context path"
            severity:
                required: false
                type: string
                default: "CRITICAL,HIGH"
                description: "Severity levels to scan for"
            fail_on_severity:
                required: false
                type: string
                default: "CRITICAL"
                description: "Severity level that will cause the workflow to fail"
            scan_type:
                required: false
                type: string
                default: "fs,config"
                description: "Types of scans to perform (fs, config, secret)"

jobs:
    trivy-security-scan:
        name: Trivy Security Scan
        runs-on: ubuntu-latest
        permissions:
            contents: read
            security-events: write
            actions: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image for scanning
              uses: docker/build-push-action@v5
              with:
                  context: ${{ inputs.context_path }}
                  file: ${{ inputs.dockerfile_path }}
                  push: false
                  tags: ${{ inputs.service_name }}:scan
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Run Trivy vulnerability scanner on filesystem
              if: contains(inputs.scan_type, 'fs')
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: ${{ inputs.context_path }}
                  format: "sarif"
                  output: "trivy-fs-results.sarif"
                  severity: ${{ inputs.severity }}
                  exit-code: "0"

            - name: Run Trivy vulnerability scanner on Docker image
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ inputs.service_name }}:scan
                  format: "sarif"
                  output: "trivy-image-results.sarif"
                  severity: ${{ inputs.severity }}
                  exit-code: "0"

            - name: Run Trivy configuration scanner
              if: contains(inputs.scan_type, 'config')
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "config"
                  scan-ref: ${{ inputs.context_path }}
                  format: "sarif"
                  output: "trivy-config-results.sarif"
                  severity: ${{ inputs.severity }}
                  exit-code: "0"

            - name: Run Trivy secret scanner
              if: contains(inputs.scan_type, 'secret')
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: ${{ inputs.context_path }}
                  scanners: "secret"
                  format: "sarif"
                  output: "trivy-secret-results.sarif"
                  severity: ${{ inputs.severity }}
                  exit-code: "0"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "."

            - name: Run Trivy scanner with fail condition
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ inputs.service_name }}:scan
                  format: "table"
                  severity: ${{ inputs.fail_on_severity }}
                  exit-code: "1"

            - name: Generate enhanced security reports
              if: always()
              run: |
                  # Install required tools
                  pip install jinja2 markdown

                  # Create enhanced report generator
                  cat > generate_reports.py << 'EOF'
                  import json
                  import os
                  import re
                  from datetime import datetime

                  def parse_sarif_file(filepath):
                      """Parse SARIF file and extract vulnerability information"""
                      if not os.path.exists(filepath):
                          return []
                      
                      try:
                          with open(filepath, 'r') as f:
                              sarif_data = json.load(f)
                          
                          vulnerabilities = []
                          for run in sarif_data.get('runs', []):
                              for result in run.get('results', []):
                                  vuln = {
                                      'rule_id': result.get('ruleId', 'Unknown'),
                                      'message': result.get('message', {}).get('text', 'No description'),
                                      'level': result.get('level', 'info'),
                                      'locations': []
                                  }
                                  
                                  for location in result.get('locations', []):
                                      physical_location = location.get('physicalLocation', {})
                                      artifact_location = physical_location.get('artifactLocation', {})
                                      vuln['locations'].append({
                                          'file': artifact_location.get('uri', 'Unknown'),
                                          'line': physical_location.get('region', {}).get('startLine', 0)
                                      })
                                  
                                  vulnerabilities.append(vuln)
                          
                          return vulnerabilities
                      except Exception as e:
                          print(f"Error parsing {filepath}: {e}")
                          return []

                  def count_by_severity(vulnerabilities):
                      """Count vulnerabilities by severity"""
                      counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'info': 0}
                      for vuln in vulnerabilities:
                          level = vuln.get('level', 'info').lower()
                          if level in counts:
                              counts[level] += 1
                          else:
                              counts['info'] += 1
                      return counts

                  # Parse all SARIF files
                  all_vulnerabilities = []
                  scan_results = {}

                  sarif_files = [
                      ('Image Scan', 'trivy-image-results.sarif'),
                      ('Filesystem Scan', 'trivy-fs-results.sarif'),
                      ('Configuration Scan', 'trivy-config-results.sarif'),
                      ('Secret Scan', 'trivy-secret-results.sarif')
                  ]

                  for scan_name, filepath in sarif_files:
                      vulns = parse_sarif_file(filepath)
                      scan_results[scan_name] = {
                          'vulnerabilities': vulns,
                          'count': len(vulns),
                          'file_exists': os.path.exists(filepath)
                      }
                      all_vulnerabilities.extend(vulns)

                  total_counts = count_by_severity(all_vulnerabilities)

                  # Generate Markdown Report
                  md_content = f"""# 🛡️ Security Scan Report - ${{ inputs.service_name }}

                  ## 📊 Executive Summary
                  - **Service**: ${{ inputs.service_name }}
                  - **Scan Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
                  - **Severity Levels Scanned**: ${{ inputs.severity }}
                  - **Fail on Severity**: ${{ inputs.fail_on_severity }}
                  - **Total Vulnerabilities Found**: {len(all_vulnerabilities)}

                  ## 🎯 Severity Breakdown
                  | Severity | Count | Status |
                  |----------|-------|--------|
                  | 🔴 Critical | {total_counts['critical']} | {'❌ Action Required' if total_counts['critical'] > 0 else '✅ Clean'} |
                  | 🟠 High | {total_counts['high']} | {'⚠️ Review Required' if total_counts['high'] > 0 else '✅ Clean'} |
                  | 🟡 Medium | {total_counts['medium']} | {'ℹ️ Monitor' if total_counts['medium'] > 0 else '✅ Clean'} |
                  | 🟢 Low | {total_counts['low']} | {'ℹ️ Informational' if total_counts['low'] > 0 else '✅ Clean'} |

                  """

                  # Add detailed scan results
                  for scan_name, result in scan_results.items():
                      if result['file_exists']:
                          md_content += f"""
                  ## {scan_name} Results
                  - **Vulnerabilities Found**: {result['count']}
                  - **Status**: {'✅ Completed' if result['count'] >= 0 else '❌ Failed'}

                  """
                          if result['vulnerabilities']:
                              md_content += "### Top Findings:\n"
                              for i, vuln in enumerate(result['vulnerabilities'][:5]):  # Show top 5
                                  md_content += f"- **{vuln['rule_id']}**: {vuln['message'][:100]}...\n"
                              if len(result['vulnerabilities']) > 5:
                                  md_content += f"- ... and {len(result['vulnerabilities']) - 5} more findings\n"
                          md_content += "\n"

                  # Add recommendations
                  md_content += """
                  ## 💡 Recommendations

                  ### Immediate Actions
                  """
                  if total_counts['critical'] > 0:
                      md_content += f"- 🚨 **URGENT**: Address {total_counts['critical']} critical vulnerabilities immediately\n"
                  if total_counts['high'] > 0:
                      md_content += f"- ⚠️ **HIGH PRIORITY**: Review and fix {total_counts['high']} high-severity issues\n"

                  md_content += """
                  ### General Security Practices
                  - 🔄 Regularly update base images and dependencies
                  - 🔒 Implement security scanning in CI/CD pipeline
                  - 📋 Review and address medium/low priority findings
                  - 🛡️ Consider implementing additional security measures

                  ### Next Steps
                  1. Download detailed SARIF files from workflow artifacts
                  2. Use security tools to get specific remediation guidance
                  3. Update vulnerable components to patched versions
                  4. Re-run security scan to verify fixes

                  ---
                  *Report generated automatically by GitHub Actions Security Pipeline*
                  """

                  # Write markdown report
                  with open('security-report.md', 'w') as f:
                      f.write(md_content)

                  # Generate HTML Report
                  html_content = f"""
                  <!DOCTYPE html>
                  <html lang="en">
                  <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Security Report - ${{ inputs.service_name }}</title>
                      <style>
                          body {{
                              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
                              line-height: 1.6; margin: 0; padding: 20px; background-color: #f6f8fa;
                          }}
                          .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }}
                          .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px; margin-bottom: 30px; }}
                          .header h1 {{ margin: 0; font-size: 2.5em; }}
                          .header p {{ margin: 5px 0; opacity: 0.9; }}
                          .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
                          .summary-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #0366d6; }}
                          .summary-card h3 {{ margin: 0 0 10px 0; color: #24292e; }}
                          .summary-card .number {{ font-size: 2em; font-weight: bold; color: #0366d6; }}
                          .severity-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
                          .severity-card {{ padding: 20px; border-radius: 8px; border: 1px solid #e1e4e8; }}
                          .critical {{ border-left: 4px solid #d73a49; background: #ffeef0; }}
                          .high {{ border-left: 4px solid #fb8500; background: #fff8f0; }}
                          .medium {{ border-left: 4px solid #ffd60a; background: #fffdf0; }}
                          .low {{ border-left: 4px solid #28a745; background: #f0fff4; }}
                          .severity-card h3 {{ margin: 0 0 10px 0; }}
                          .severity-card .count {{ font-size: 1.8em; font-weight: bold; }}
                          .scan-results {{ margin-bottom: 30px; }}
                          .scan-result {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }}
                          .scan-result h3 {{ margin: 0 0 15px 0; color: #24292e; }}
                          .vulnerability {{ background: white; padding: 15px; border-radius: 6px; margin: 10px 0; border-left: 3px solid #e1e4e8; }}
                          .recommendations {{ background: #e3f2fd; padding: 25px; border-radius: 8px; }}
                          .recommendations h2 {{ margin-top: 0; color: #1565c0; }}
                          .recommendations ul {{ padding-left: 20px; }}
                          .recommendations li {{ margin-bottom: 8px; }}
                          .footer {{ text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e1e4e8; color: #586069; }}
                      </style>
                  </head>
                  <body>
                      <div class="container">
                          <div class="header">
                              <h1>🛡️ Security Scan Report</h1>
                              <p><strong>Service:</strong> ${{ inputs.service_name }}</p>
                              <p><strong>Scan Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
                              <p><strong>Severity Levels:</strong> ${{ inputs.severity }}</p>
                          </div>

                          <div class="summary">
                              <div class="summary-card">
                                  <h3>Total Vulnerabilities</h3>
                                  <div class="number">{len(all_vulnerabilities)}</div>
                              </div>
                              <div class="summary-card">
                                  <h3>Scans Completed</h3>
                                  <div class="number">{sum(1 for r in scan_results.values() if r['file_exists'])}</div>
                              </div>
                              <div class="summary-card">
                                  <h3>Critical Issues</h3>
                                  <div class="number" style="color: #d73a49;">{total_counts['critical']}</div>
                              </div>
                          </div>

                          <h2>🎯 Severity Breakdown</h2>
                          <div class="severity-grid">
                              <div class="severity-card critical">
                                  <h3>🔴 Critical</h3>
                                  <div class="count">{total_counts['critical']}</div>
                                  <p>{'Immediate action required' if total_counts['critical'] > 0 else 'No critical issues found'}</p>
                              </div>
                              <div class="severity-card high">
                                  <h3>🟠 High</h3>
                                  <div class="count">{total_counts['high']}</div>
                                  <p>{'Review and fix soon' if total_counts['high'] > 0 else 'No high-severity issues'}</p>
                              </div>
                              <div class="severity-card medium">
                                  <h3>🟡 Medium</h3>
                                  <div class="count">{total_counts['medium']}</div>
                                  <p>{'Monitor and plan fixes' if total_counts['medium'] > 0 else 'No medium-severity issues'}</p>
                              </div>
                              <div class="severity-card low">
                                  <h3>🟢 Low</h3>
                                  <div class="count">{total_counts['low']}</div>
                                  <p>{'Informational findings' if total_counts['low'] > 0 else 'No low-severity issues'}</p>
                              </div>
                          </div>

                          <h2>🔍 Detailed Scan Results</h2>
                          <div class="scan-results">
                  """

                  for scan_name, result in scan_results.items():
                      if result['file_exists']:
                          html_content += f"""
                              <div class="scan-result">
                                  <h3>{scan_name}</h3>
                                  <p><strong>Vulnerabilities Found:</strong> {result['count']}</p>
                                  <p><strong>Status:</strong> ✅ Completed</p>
                          """
                          if result['vulnerabilities']:
                              html_content += "<h4>Top Findings:</h4>"
                              for vuln in result['vulnerabilities'][:5]:
                                  html_content += f"""
                                      <div class="vulnerability">
                                          <strong>{vuln['rule_id']}</strong><br>
                                          {vuln['message'][:200]}...
                                      </div>
                                  """
                          html_content += "</div>"

                  html_content += f"""
                          </div>

                          <div class="recommendations">
                              <h2>💡 Recommendations</h2>
                              <h3>Immediate Actions</h3>
                              <ul>
                  """
                  if total_counts['critical'] > 0:
                      html_content += f"<li>🚨 <strong>URGENT:</strong> Address {total_counts['critical']} critical vulnerabilities immediately</li>"
                  if total_counts['high'] > 0:
                      html_content += f"<li>⚠️ <strong>HIGH PRIORITY:</strong> Review and fix {total_counts['high']} high-severity issues</li>"

                  html_content += """
                              </ul>
                              <h3>General Security Practices</h3>
                              <ul>
                                  <li>🔄 Regularly update base images and dependencies</li>
                                  <li>🔒 Implement security scanning in CI/CD pipeline</li>
                                  <li>📋 Review and address medium/low priority findings</li>
                                  <li>🛡️ Consider implementing additional security measures</li>
                              </ul>
                          </div>

                          <div class="footer">
                              <p>Report generated automatically by GitHub Actions Security Pipeline</p>
                              <p>For detailed technical information, download SARIF files from workflow artifacts</p>
                          </div>
                      </div>
                  </body>
                  </html>
                  """

                  # Write HTML report
                  with open('security-report.html', 'w') as f:
                      f.write(html_content)

                  # Generate PR comment data
                  pr_comment = f"""## 🛡️ Security Scan Results - ${{ inputs.service_name }}

                  **📅 Scan Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
                  **🔍 Severity Levels:** ${{ inputs.severity }}
                  **⚡ Scan Types:** ${{ inputs.scan_type }}

                  ### 📊 Summary
                  | Severity | Count | Status |
                  |----------|-------|--------|
                  | 🔴 Critical | {total_counts['critical']} | {'❌ Action Required' if total_counts['critical'] > 0 else '✅ Clean'} |
                  | 🟠 High | {total_counts['high']} | {'⚠️ Review Required' if total_counts['high'] > 0 else '✅ Clean'} |
                  | 🟡 Medium | {total_counts['medium']} | {'ℹ️ Monitor' if total_counts['medium'] > 0 else '✅ Clean'} |
                  | 🟢 Low | {total_counts['low']} | {'ℹ️ Informational' if total_counts['low'] > 0 else '✅ Clean'} |

                  ### 🎯 Key Findings
                  """

                  if len(all_vulnerabilities) == 0:
                      pr_comment += "✅ **No vulnerabilities found!** Your code is looking secure.\n\n"
                  else:
                      pr_comment += f"Found **{len(all_vulnerabilities)} total vulnerabilities** across all scans.\n\n"
                      
                      if total_counts['critical'] > 0:
                          pr_comment += f"🚨 **{total_counts['critical']} Critical** - Immediate attention required\n"
                      if total_counts['high'] > 0:
                          pr_comment += f"⚠️ **{total_counts['high']} High** - Should be addressed soon\n"

                  pr_comment += f"""
                  ### 📋 Scan Coverage
                  """
                  for scan_name, result in scan_results.items():
                      status = "✅ Completed" if result['file_exists'] else "⏭️ Skipped"
                      pr_comment += f"- **{scan_name}**: {status} ({result['count']} findings)\n"

                  pr_comment += """
                  ### 📥 Detailed Reports
                  - 📄 **Markdown Report**: Download from workflow artifacts
                  - 🌐 **HTML Report**: Rich visual report with detailed breakdown
                  - 📊 **SARIF Files**: Technical vulnerability data for security tools

                  ### 🔗 Quick Links
                  - [View Workflow Run](../actions)
                  - [Download Reports](../actions) (Check artifacts section)

                  ---
                  *🤖 This comment was automatically generated by the Security Pipeline*
                  """

                  # Write PR comment to file
                  with open('pr-comment.md', 'w') as f:
                      f.write(pr_comment)

                  print("✅ Enhanced reports generated successfully!")
                  print(f"📊 Total vulnerabilities found: {len(all_vulnerabilities)}")
                  print(f"🔴 Critical: {total_counts['critical']}")
                  print(f"🟠 High: {total_counts['high']}")
                  print(f"🟡 Medium: {total_counts['medium']}")
                  print(f"🟢 Low: {total_counts['low']}")

                  EOF

                  # Run the report generator
                  python generate_reports.py

            - name: Upload enhanced security reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-reports-${{ inputs.service_name }}
                  path: |
                      security-report.md
                      security-report.html
                      pr-comment.md
                      *.sarif
                  retention-days: 30

            - name: Upload individual SARIF files
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: sarif-files-${{ inputs.service_name }}
                  path: "*.sarif"
                  retention-days: 30

            - name: Comment PR with enhanced security results
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');

                      // Use the enhanced PR comment if available, otherwise fall back to markdown report
                      let commentBody = '';

                      if (fs.existsSync('pr-comment.md')) {
                        commentBody = fs.readFileSync('pr-comment.md', 'utf8');
                        console.log('Using enhanced PR comment');
                      } else if (fs.existsSync('security-report.md')) {
                        commentBody = fs.readFileSync('security-report.md', 'utf8');
                        console.log('Using fallback markdown report');
                      } else {
                        commentBody = `## 🛡️ Security Scan Results - ${{ inputs.service_name }}
                        
                        ⚠️ Security scan completed but reports could not be generated.
                        Please check the workflow logs for details.
                        
                        **Scan Configuration:**
                        - Service: ${{ inputs.service_name }}
                        - Severity: ${{ inputs.severity }}
                        - Scan Types: ${{ inputs.scan_type }}
                        
                        📥 **Download detailed reports from workflow artifacts**`;
                        console.log('Using fallback message');
                      }

                      // Post the comment
                      try {
                        await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: commentBody
                        });
                        console.log('✅ PR comment posted successfully');
                      } catch (error) {
                        console.error('❌ Failed to post PR comment:', error);
                        // Don't fail the workflow if comment posting fails
                      }

            - name: Display security scan summary
              if: always()
              run: |
                  echo "🛡️ Security Scan Summary for ${{ inputs.service_name }}"
                  echo "=================================================="
                  echo "📅 Scan Date: $(date)"
                  echo "🔍 Severity Levels: ${{ inputs.severity }}"
                  echo "⚡ Scan Types: ${{ inputs.scan_type }}"
                  echo "📊 Reports Generated:"

                  if [ -f "security-report.md" ]; then
                    echo "  ✅ Markdown Report: security-report.md"
                  else
                    echo "  ❌ Markdown Report: Not generated"
                  fi

                  if [ -f "security-report.html" ]; then
                    echo "  ✅ HTML Report: security-report.html"
                  else
                    echo "  ❌ HTML Report: Not generated"
                  fi

                  if [ -f "pr-comment.md" ]; then
                    echo "  ✅ PR Comment: pr-comment.md"
                  else
                    echo "  ❌ PR Comment: Not generated"
                  fi

                  echo ""
                  echo "📥 All reports are available in workflow artifacts"
                  echo "🔗 SARIF files uploaded to GitHub Security tab (if available)"
                  echo "=================================================="
